name: release-kchat

on:
    push:
        #branches: [feat/github-actions-settings]
        tags:
            - "[0-9]+.[0-9]+.[0-9]+-alpha.[0-9]"
            - "[0-9]+.[0-9]+.[0-9]+-beta.[0-9]"
jobs:
    create-release:
        runs-on: ubuntu-latest
        outputs:
            output_url: ${{ steps.create_release.outputs.upload_url }}
        steps:
            - name: release/checkout-repo
              uses: actions/checkout@v3
            - name: Create Release
              id: create_release
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: ${{ github.ref }}
                  release_name: ${{ github.ref }}
                  draft: false
                  prerelease: false

    build-mac:
        runs-on: macos-latest
        needs:
            - create-release
        steps:
            - name: release/checkout-repo
              uses: actions/checkout@v3
            - name: release/setup-node
              uses: actions/setup-node@v3
              with:
                  node-version-file: "package.json"
                  cache: "npm"
                  cache-dependency-path: package-lock.json
            - name: release/install-dependencies
              env:
                  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
              run: |
                  brew install yq rename
                  npm ci
            - name: release/update-version
              uses: ./.github/actions/version
            - name: release/test
              uses: ./.github/actions/test
            - name: release/build
              env:
                  APPLEID: ${{ secrets.APPLEID }}
                  APPLEIDPASS: ${{ secrets.APPLEIDPASS }}
                  CSC_FOR_PULL_REQUEST: true
                  CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
                  CSC_LINK: ${{ secrets.CSC_LINK }}
              run: |
                  npm run package:mac
                  mkdir -p ./artifacts
                  find ./release -type f \( -name "*.dmg" \) -exec cp {} ./artifacts/ \;
            - name: release/upload-build
              uses: actions/upload-artifact@v3
              with:
                  name: artifacts
                  path: ./artifacts
                  retention-days: 1

    build-linux:
        runs-on: ubuntu-latest
        needs:
            - create-release
        steps:
            - name: release/checkout-repo
              uses: actions/checkout@v3
            - name: release/setup-node
              uses: actions/setup-node@v3
              with:
                  node-version-file: "package.json"
                  cache: "npm"
                  cache-dependency-path: package-lock.json
            - name: release/install-dependencies
              env:
                  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
              run: |
                  wget -qO - https://download.opensuse.org/repositories/Emulators:/Wine:/Debian/xUbuntu_22.04/Release.key | sudo apt-key add -
                  wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.20.1/yq_linux_amd64 && chmod a+x /usr/local/bin/yq
                  sudo apt-get update || true && sudo apt-get install -y ca-certificates libxtst-dev libpng++-dev gcc-aarch64-linux-gnu g++-aarch64-linux-gnu jq icnsutils graphicsmagick tzdata
                  npm ci
            - name: release/update-version
              uses: ./.github/actions/version
            - name: release/test
              uses: ./.github/actions/test
            - name: release/build
              run: |
                  mkdir -p ./build/linux
                  npm run package:linux
                  mkdir -p ./artifacts
                  find ./release -type f \( -name "*.rpm" -o -name "*.deb" -o -name "*.AppImage" \) -exec cp {} ./artifacts/ \;
            - name: release/upload-build
              uses: actions/upload-artifact@v3
              with:
                  name: artifacts
                  path: ./artifacts
                  retention-days: 1

    build-msi-installer:
        runs-on: windows-2022
        needs:
            - create-release
        steps:
            - name: release/checkout-repo
              uses: actions/checkout@v3
            - name: release/setup-node
              uses: actions/setup-node@v3
              with:
                  node-version: "16.16.0"
            - name: release/optimize
              shell: powershell
              run: ./scripts/Makefile.ps1 optimize
            - name: release/install-deps
              env:
                  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
              shell: powershell
              run: |
                  ./scripts/Makefile.ps1 install-deps
                  choco install yq --version 4.15.1 -y
                  npm i -g node-gyp
                  node-gyp install
                  node-gyp install --devdir="C:\Users\runneradmin\.electron-gyp" --target=$(jq -r .devDependencies.electron package.json) --dist-url="https://electronjs.org/headers"
                  node-gyp install --devdir="C:\Users\runneradmin\.electron-gyp" --target=$(jq -r .devDependencies.electron package.json) --dist-url="https://electronjs.org/headers" --arch arm64
                  node-gyp install --devdir="C:\Users\runneradmin\.electron-gyp" --target=$(jq -r .devDependencies.electron package.json) --dist-url="https://electronjs.org/headers" --arch ia32
                  npm ci --openssl_fips=''
            - name: release/update-version
              uses: ./.github/actions/version
            # - name: release/test
            #  uses: ./.github/actions/test
            - name: release/build
              run: |
                  npm run package:windows-nsis

    upload-to-github:
        runs-on: ubuntu-latest
        needs:
            - create-release
            - build-mac
            #   - build-msi-installer
            - build-linux
        steps:
            - name: release/download-builds
              uses: actions/download-artifact@v3
              with:
                  name: artifacts
                  path: ./artifacts
            - name: upload artifacts
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ needs.create-release.outputs.output_url }}
                  asset_path: ./artifacts

    #upload-to-s3:
    #    runs-on: ubuntu-latest
    #    needs:
    #        - build-mac-installer
    #        - build-msi-installer
    #        - build-linux
    #    steps:
    #        - name: Configure AWS Credentials
    #          uses: aws-actions/configure-aws-credentials@v4
    #          with:
    #              aws-region: us-east-1
    #              aws-access-key-id: ${{ secrets.MM_DESKTOP_RELEASE_AWS_ACCESS_KEY_ID }}
    #              aws-secret-access-key: ${{ secrets.MM_DESKTOP_RELEASE_AWS_SECRET_ACCESS_KEY }}
    #        - name: release/download-builds
    #          uses: actions/download-artifact@v3
    #        - name: release/setup-files-for-aws
    #          run: |
    #              mkdir -p ./aws-s3-dist
    #              cp -r --backup=numbered ./build/{macos-release,win-release,linux}/* ./aws-s3-dist
    #        - name: release/upload-to-s3
    # run: aws s3 cp ./aws-s3-dist/ s3://releases.mattermost.com/desktop/ --acl public-read --cache-control "no-cache" --recursive
