include:
  - project: 'docker-public/gitlab-ci-dev-scripts'
    ref: master
    file: '/sentry-release.yaml'

stages:
  - test
  - release

workflow:
  rules:
    - if: "$CI_COMMIT_TAG =~ /\\-beta.*/"
      variables:
        DEPLOY_VARIABLE: beta
        SLACK_NOTIFY_CHANNEL: C03BA6564NP
    - if: "$CI_COMMIT_TAG =~ /\\-alpha.*/"
      variables:
        DEPLOY_VARIABLE: alpha
        SLACK_NOTIFY_CHANNEL: C03BA6564NP
    - if: "$CI_COMMIT_TAG"
      variables:
        DEPLOY_VARIABLE: stable
        SLACK_NOTIFY_CHANNEL: C02NHLU88MN
    - if: $CI_COMMIT_BRANCH == "master"
      variables:
        DEPLOY_VARIABLE: prodsec
    - if: "$CI_MERGE_REQUEST_ID"
      variables:
        DEPLOY_VARIABLE: "staging/${CI_COMMIT_REF_SLUG}"
    - when: never

sentry_release:
  stage: release
  rules:
    - if: $DEPLOY_VARIABLE == "beta" || $DEPLOY_VARIABLE == "alpha" || $DEPLOY_VARIABLE == "stable"
      when: on_success
      allow_failure: false
    - when: never

unit_test:
  stage: test
  image: node:16.10.0
  tags:
    - docker-executor
    - kubernetes
    - shared
  environment:
    name: "$DEPLOY_VARIABLE"
  rules:
    - if: $DEPLOY_VARIABLE == "staging/${CI_COMMIT_REF_SLUG}"
      when: on_success
    - if: $DEPLOY_VARIABLE == "prodsec"
      when: on_success
    - when: never
  artifacts:
    paths:
      - coverage/
    when: on_success
    reports:
      junit:
        - coverage/junit.xml
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - coverage/
  before_script:
    - npm install
  script:
    # unit tests
    - npm run test:unit-ci

# changelog:
#   stage: release
#   image: registry.infomaniak.com:443/leopold.jacquot/debian-toolbox:0.0.1
#   environment:
#     name: "$DEPLOY_VARIABLE"
#   rules:
#     - if: $DEPLOY_VARIABLE == "stable"
#       when: on_success
#     - if: $DEPLOY_VARIABLE == "beta"
#       when: on_success
#     - when: never
#   script:
#     - "./release.sh ${GITLAB_API_TOKEN} ${CI_COMMIT_TAG} ${CI_COMMIT_TAG:0:3} ${SLACK_API_TOKEN} ${SLACK_NOTIFY_CHANNEL}"
